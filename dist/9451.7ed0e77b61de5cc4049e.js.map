{"version":3,"file":"9451.7ed0e77b61de5cc4049e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.module.scss?8966","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/helpers/videoFormats.ts","webpack://telegram-t/./src/util/progressiveLoader.ts","webpack://telegram-t/./src/hooks/useStreaming.ts","webpack://telegram-t/./src/components/story/hooks/useStoryPreloader.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/story/StoryToggler.module.scss?58fa","webpack://telegram-t/./src/components/story/helpers/ribbonAnimation.ts","webpack://telegram-t/./src/components/story/StoryRibbonButton.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.tsx","webpack://telegram-t/./src/components/story/StoryToggler.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.module.scss?d42b","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx"],"sourcesContent":["import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(global: GlobalState, params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize || FALLBACK_DIMENSIONS;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): Complete<StateProps> => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div\n        className=\"media-viewer-head\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n        chatId,\n        threadId,\n        messageId,\n        message: undefined,\n        collectedMessageIds: undefined,\n        chatMessages: undefined,\n        sponsoredMessage: undefined,\n        withDynamicLoading,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, currentItem);\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n      canUpdateMedia: undefined,\n      avatar: undefined,\n      avatarOwner: undefined,\n      profilePhotos: undefined,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CdTfL4f7\",\"fadeIn\":\"MyeHARy0\",\"closing\":\"EZbKn_M3\",\"peer\":\"kW0xpExG\",\"name\":\"BDZrSTO_\",\"name_hasUnreadStory\":\"OoUm5AUZ\",\"nameHasUnreadStory\":\"OoUm5AUZ\",\"hidden\":\"lnVtxMZI\",\"contextMenu\":\"N1sagA0s\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","export const PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';\nexport const SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';\n","import { ApiMediaFormat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.25 * MB;\nconst MAX_END_TO_CACHE = 5 * MB - 1; // We only cache the first 2 MB of each file\n\nconst bufferCache = new Map<string, ArrayBuffer>();\nconst sizeCache = new Map<string, number>();\nconst pendingRequests = new Map<string, Promise<{ arrayBuffer?: ArrayBuffer; fullSize?: number } | undefined>>();\n\nexport async function* makeProgressiveLoader(\n  url: string,\n  start = 0,\n  chunkSize = DEFAULT_PART_SIZE,\n): AsyncGenerator<ArrayBuffer, void, undefined> {\n  const match = url.match(/fileSize=(\\d+)/);\n  let fileSize;\n  if (match) {\n    fileSize = match && Number(match[1]);\n  } else {\n    fileSize = sizeCache.get(url);\n  }\n\n  while (true) {\n    if (fileSize && start >= fileSize) return;\n\n    let end = start + chunkSize - 1;\n    if (fileSize && end > fileSize) {\n      end = fileSize - 1;\n    }\n\n    // Check if we have the chunk in memory\n    const cacheKey = `${url}:${start}-${end}`;\n    let arrayBuffer = bufferCache.get(cacheKey);\n\n    if (!arrayBuffer) {\n      let request = pendingRequests.get(cacheKey);\n      if (!request) {\n        request = callApi('downloadMedia', {\n          mediaFormat: ApiMediaFormat.Progressive,\n          url,\n          start,\n          end,\n        });\n\n        pendingRequests.set(cacheKey, request);\n      }\n\n      const result = await request.finally(() => {\n        pendingRequests.delete(cacheKey);\n      });\n\n      if (!result?.arrayBuffer) return;\n\n      // If fileSize is not yet defined, retrieve it from the first chunk's response\n      if (result.fullSize && !fileSize) {\n        fileSize = result.fullSize;\n        sizeCache.set(url, result.fullSize);\n      }\n\n      // Store the chunk in memory\n      arrayBuffer = result.arrayBuffer;\n\n      // Cache the first 2 MB of each file\n      if (end <= MAX_END_TO_CACHE) {\n        bufferCache.set(cacheKey, result.arrayBuffer);\n      }\n    }\n\n    // Yield the chunk data\n    yield arrayBuffer;\n\n    start = end + 1;\n  }\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../util/animation';\nimport unloadVideo from '../util/browser/unloadVideo';\nimport { IS_SAFARI } from '../util/browser/windowEnvironment';\nimport { makeProgressiveLoader } from '../util/progressiveLoader';\n\nconst VIDEO_REVEAL_DELAY = 100;\n\nexport function useStreaming(videoRef: ElementRef<HTMLVideoElement>, url?: string, mimeType?: string) {\n  useEffect(() => {\n    if (!url || !videoRef.current) return undefined;\n    const MediaSourceClass = getMediaSource();\n    const video = videoRef.current;\n\n    if (!IS_SAFARI || !mimeType || !MediaSourceClass?.isTypeSupported(mimeType)) {\n      return undefined;\n    }\n    const mediaSource = new MediaSourceClass();\n\n    function revealVideo() {\n      requestMutation(() => {\n        video.style.display = 'block';\n        setTimeout(() => {\n          requestMutation(() => {\n            applyStyles(video, { opacity: '1' });\n          });\n        }, VIDEO_REVEAL_DELAY);\n      });\n    }\n\n    function onSourceOpen() {\n      if (!url || !mimeType) return;\n\n      const sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n      const loader = makeProgressiveLoader(url);\n\n      function onUpdateEnded() {\n        loader.next()\n          .then(({\n            value,\n            done,\n          }) => {\n            if (mediaSource.readyState !== 'open') return;\n            if (done) {\n              endOfStream(mediaSource);\n              return;\n            }\n            appendBuffer(sourceBuffer, value);\n          });\n      }\n\n      sourceBuffer.addEventListener('updateend', onUpdateEnded);\n\n      loader.next()\n        .then(({\n          value,\n          done,\n        }) => {\n          if (done || mediaSource.readyState !== 'open') return;\n          revealVideo();\n          appendBuffer(sourceBuffer, value);\n        });\n    }\n\n    mediaSource.addEventListener('sourceopen', onSourceOpen, { once: true });\n\n    requestMutation(() => {\n      applyStyles(video, {\n        display: 'none',\n        opacity: '0',\n      });\n      video.src = URL.createObjectURL(mediaSource);\n    });\n\n    return () => {\n      requestMutation(() => {\n        const src = video.src;\n        unloadVideo(video);\n        mediaSource.removeEventListener('sourceopen', onSourceOpen);\n        if (mediaSource.readyState === 'open') {\n          endOfStream(mediaSource);\n        }\n        URL.revokeObjectURL(src);\n      });\n    };\n  }, [mimeType, url, videoRef]);\n\n  return checkIfStreamingSupported(mimeType);\n}\n\nexport function checkIfStreamingSupported(mimeType?: string) {\n  if (!IS_SAFARI || !mimeType) return false;\n  return Boolean(getMediaSource()?.isTypeSupported(mimeType));\n}\n\nfunction appendBuffer(sourceBuffer: SourceBuffer, buffer: ArrayBuffer) {\n  try {\n    sourceBuffer.appendBuffer(buffer);\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to append buffer', error);\n    }\n  }\n}\n\nfunction endOfStream(mediaSource: MediaSource) {\n  try {\n    mediaSource.endOfStream();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to end stream', error);\n    }\n  }\n}\n\nfunction getMediaSource(): typeof MediaSource | undefined {\n  if ('ManagedMediaSource' in window) {\n    // @ts-ignore\n    return ManagedMediaSource;\n  }\n  if ('MediaSource' in window) {\n    return MediaSource;\n  }\n  return undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport { selectPeerStories } from '../../../global/selectors';\nimport unloadVideo from '../../../util/browser/unloadVideo';\nimport { preloadImage } from '../../../util/files';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getProgressiveUrl } from '../../../util/mediaLoader';\nimport { makeProgressiveLoader } from '../../../util/progressiveLoader';\nimport { pause } from '../../../util/schedulers';\nimport { PRIMARY_VIDEO_MIME } from '../helpers/videoFormats';\n\nimport { checkIfStreamingSupported } from '../../../hooks/useStreaming';\n\nconst preloadedStories: Record<string, Set<number>> = {};\nconst PEER_STORIES_FOR_PRELOAD = 5;\nconst PROGRESSIVE_PRELOAD_DURATION = 1000;\nconst STREAM_PRELOAD_SIZE = 1024 * 1024 * 2; // 2 MB\n\nconst FIRST_PRELOAD_DELAY = 1000;\nconst canPreload = pause(FIRST_PRELOAD_DELAY);\n\ntype MediaHash = { hash: string; format: ApiMediaFormat; isStream?: boolean };\n\nfunction useStoryPreloader(peerIds: string[]): void;\nfunction useStoryPreloader(peerId?: string, aroundStoryId?: number): void;\nfunction useStoryPreloader(peerId?: string | string[], aroundStoryId?: number) {\n  useEffect(() => {\n    if (peerId === undefined) return;\n\n    const preloadHashes = async (mediaHashes: Array<MediaHash>) => {\n      await canPreload;\n      mediaHashes.forEach(({ hash, format, isStream }) => {\n        if (isStream) {\n          preloadStream(hash);\n          return;\n        }\n        mediaLoader.fetch(\n          hash,\n          format,\n        )\n          .then((result) => {\n            if (!result) return;\n\n            if (format === ApiMediaFormat.Progressive) {\n              preloadProgressive(result);\n            }\n            if (format === ApiMediaFormat.BlobUrl) {\n              preloadImage(result);\n            }\n          });\n      });\n    };\n\n    const peerIds = Array.isArray(peerId) ? peerId : [peerId];\n\n    peerIds.forEach((id) => {\n      const storyId = aroundStoryId || getGlobal().stories.byPeerId[id]?.orderedIds?.[0];\n      if (!storyId) return;\n      preloadHashes(getPreloadMediaHashes(id, storyId));\n    });\n  }, [aroundStoryId, peerId]);\n}\n\nfunction findIdsAroundCurrentId<T>(ids: T[], currentId: T, aroundAmount: number): T[] {\n  const currentIndex = ids.indexOf(currentId);\n  const start = Math.max(currentIndex - aroundAmount, 0);\n  const end = Math.min(currentIndex + aroundAmount, ids.length);\n  return ids.slice(start, end);\n}\n\nfunction getPreloadMediaHashes(peerId: string, storyId: number) {\n  const peerStories = selectPeerStories(getGlobal(), peerId);\n  if (!peerStories || !peerStories.orderedIds?.length) {\n    return [];\n  }\n\n  const preloadIds = findIdsAroundCurrentId(peerStories.orderedIds, storyId, PEER_STORIES_FOR_PRELOAD);\n\n  const mediaHashes: Array<MediaHash> = [];\n  preloadIds.forEach((currentStoryId) => {\n    if (preloadedStories[peerId]?.has(currentStoryId)) {\n      return;\n    }\n\n    const story = peerStories.byId[currentStoryId];\n    if (!story || !('content' in story)) {\n      return;\n    }\n\n    const isVideo = Boolean(story.content.video);\n\n    // Media\n    mediaHashes.push({\n      hash: getStoryMediaHash(story, 'full'),\n      format: isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl,\n      isStream: isVideo && checkIfStreamingSupported(PRIMARY_VIDEO_MIME),\n    });\n    // Thumbnail\n    mediaHashes.push({ hash: getStoryMediaHash(story), format: ApiMediaFormat.BlobUrl });\n    if (story.content.altVideos) {\n      mediaHashes.push({\n        hash: getStoryMediaHash(story, 'full', true)!,\n        format: ApiMediaFormat.Progressive,\n      });\n    }\n\n    preloadedStories[peerId] = (preloadedStories[peerId] || new Set()).add(currentStoryId);\n  });\n\n  return mediaHashes;\n}\n\nfunction preloadProgressive(url: string) {\n  const head = document.head;\n  const video = document.createElement('video');\n  video.preload = 'auto';\n  video.src = url;\n  video.muted = true;\n  video.autoplay = true;\n  video.disableRemotePlayback = true;\n  video.style.display = 'none';\n  head.appendChild(video);\n  video.load();\n  setTimeout(() => {\n    unloadVideo(video);\n    head.removeChild(video);\n  }, PROGRESSIVE_PRELOAD_DURATION);\n}\n\nasync function preloadStream(hash: string) {\n  const loader = makeProgressiveLoader(getProgressiveUrl(hash));\n  let cachedSize = 0;\n  for await (const chunk of loader) {\n    cachedSize += chunk.byteLength;\n    if (cachedSize >= STREAM_PRELOAD_SIZE) {\n      break;\n    }\n  }\n}\n\nexport default useStoryPreloader;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): Complete<StateProps> => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): Complete<StateProps> => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig.storyChangelogUserId,\n    viewersExpirePeriod: appConfig.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpireDate?: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpireDate,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(viewersExpireDate) && viewersExpireDate < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n  const storyExpireDate = story?.['@type'] === 'story' ? story.expireDate : undefined;\n\n  return {\n    views,\n    viewersExpireDate: storyExpireDate ? (storyExpireDate + appConfig.storyViewersExpirePeriod) : undefined,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      changeWebAppModalState({ state: 'minimized' });\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={lang('AriaMiniApp', { bot: bot?.firstName })}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectCustomEmoji,\n  selectIsCurrentUserPremium,\n  selectStickerSet,\n  selectTabState,\n  selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift && gift.type !== 'starGiftUnique' && gift.perUserTotal) {\n      return lang('DescriptionGiftPremiumRequired2', { count: gift.perUserTotal }, {\n        pluralValue: gift.perUserTotal,\n      });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? selectCustomEmoji(global, fromUser.emojiStatus.documentId)\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig.limits,\n    premiumSlug: global.appConfig.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig.premiumBotUsername,\n    premiumPromoOrder: global.appConfig.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): Complete<StateProps> => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {\n      members: undefined,\n      adminMembersById: undefined,\n    };\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): Complete<StateProps> => {\n    const { limits } = global.appConfig;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): Complete<StateProps> => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const minLevelToRestrictAds = global.appConfig.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            onClearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\n// Add 1 minute if time is less than server min, to allow user to send the message\nconst FUTURE_TIME_ADJUSTMENT = 1 * 60;\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate\n        ? Math.max(scheduleDate / 1000, getServerTime() + futureMin + FUTURE_TIME_ADJUSTMENT)\n        : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig.starsSuggestedPostAmountMax;\n    const minStarsAmount = appConfig.starsSuggestedPostAmountMin;\n    const ageMinSeconds = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n\n    const tonMaxAmount = appConfig.tonSuggestedPostAmountMax;\n    const tonMinAmount = appConfig.tonSuggestedPostAmountMin;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig.starsSuggestedPostCommissionPermille;\n    const tonCommissionPermille = appConfig.tonSuggestedPostCommissionPermille;\n    const minAge = appConfig.starsSuggestedPostAgeMin;\n    const futureMin = appConfig.starsSuggestedPostFutureMin;\n    const futureMax = appConfig.starsSuggestedPostFutureMax;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('ChatPermissionNotAvailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('SendMediaPermissionPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('SendMediaPermissionVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('SendMediaPermissionStickersGifs')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('SendMediaPermissionAudios')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('SendMediaPermissionFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('SendMediaPermissionVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('SendMediaPermissionRoundVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('SendMediaPermissionWebPages')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('SendMediaPermissionPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('UserRestrictionsCreateTopics')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasIpRevealingMedia,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutFiles?: boolean;\n  hasIpRevealingMedia?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutFiles,\n  hasIpRevealingMedia,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isFileIpDialogOpen, openFileIpDialog, closeFileIpDialog] = useFlag();\n  const [shouldNotWarnAboutFiles, setShouldNotWarnAboutFiles] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutFiles && hasIpRevealingMedia) {\n      openFileIpDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleFileIpConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutFiles: !shouldNotWarnAboutFiles });\n    closeFileIpDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isFileIpDialogOpen}\n        onClose={closeFileIpDialog}\n        confirmHandler={handleFileIpConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutFiles}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutFiles}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasIpRevealingMedia = selectedMessageIds && chatId\n      ? selectHasIpRevealingMedia(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutFiles,\n      hasIpRevealingMedia,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {\n        seenByDates: undefined,\n      };\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): Complete<StateProps> => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): Complete<StateProps> => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutFiles?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutFiles,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { UNMUTE_TIMESTAMP } from '../../../config';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView, updateChatMutedState } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const handleUnmute = useLastCallback(() => {\n    updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n  });\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleUnmute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(oldLang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): Complete<StateProps> => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatListSearchNoResults')}\n            description={lang('ChatListSearchNoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchResultTopics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={lang('ChatListSearchNoResults')}\n          description={lang('ChatListSearchNoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchResultMyChannels' : 'DialogListSearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatListSearchShowLess' : 'ChatListSearchShowMore')}\n              </Link>\n            )}\n            {lang('DialogListSearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchResultRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {lang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutFiles,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={lang('ChatListSearchNoResults')}\n                description={lang('ChatListSearchNoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { FOLDER_TITLE_MAX_LENGTH, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n  isCurrentUserPremium: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst FOLDER_COLORS = [0, 1, 2, 3, 4, 5, 6];\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            maxLength={FOLDER_TITLE_MAX_LENGTH}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3 color-picker-title\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorTitle')}\n            <div className={buildClassName(\n              'color-picker-selected-color',\n              isCurrentUserPremium && state.folder.color !== undefined && state.folder.color !== -1\n                ? getApiPeerColorClass({ color: state.folder.color })\n                : 'color-picker-item-disabled',\n            )}\n            >\n              {renderTextWithEntities({\n                text: state.folder.title.text,\n                entities: state.folder.title.entities,\n                noCustomEmojiPlayback: state.folder.noTitleAnimations,\n              })}\n            </div>\n          </h4>\n          <div className=\"color-picker\">\n            {FOLDER_COLORS.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => {\n                  if (!isCurrentUserPremium) {\n                    openPremiumModal();\n                    return;\n                  }\n\n                  dispatch({ type: 'setColor', payload: color });\n                }}\n                className={buildClassName(\n                  'color-picker-item',\n                  getApiPeerColorClass({ color }),\n                  !isCurrentUserPremium && 'color-picker-item-hover-disabled',\n                  color === state.folder.color && isCurrentUserPremium && 'color-picker-item-active',\n                )}\n              />\n            ))}\n            <button\n              type=\"button\"\n              onClick={() => {\n                if (!isCurrentUserPremium) {\n                  openPremiumModal();\n                  return;\n                }\n\n                dispatch({ type: 'setColor', payload: undefined });\n              }}\n              className={buildClassName(\n                'color-picker-item',\n                'color-picker-item-none',\n                (state.folder.color === undefined || state.folder.color === -1 || !isCurrentUserPremium)\n                && 'color-picker-item-active',\n              )}\n            >\n              {isCurrentUserPremium ? (\n                <Icon name=\"close\" className=\"color-picker-item-none-icon\" />\n              ) : (\n                <Icon name=\"lock-badge\" className=\"color-picker-item-none-icon\" />\n              )}\n            </button>\n          </div>\n          <p className=\"settings-item-description mb-0\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterColorHint')}\n          </p>\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): Complete<StateProps> => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n      isCurrentUserPremium,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { getApiPeerColorClass } from '../../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n  areTagsEnabled?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n  areTagsEnabled,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n    toggleDialogFilterTags,\n    openPremiumModal,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        color: folder.color,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleToggleTags = useCallback(() => {\n    if (!isPremium) {\n      return;\n    }\n\n    toggleDialogFilterTags({ isEnabled: !areTagsEnabled });\n  }, [areTagsEnabled, isPremium, toggleDialogFilterTags]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Move icon into button prop\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            const shouldRenderColor = folder?.color !== undefined && folder.color !== -1 && isPremium;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: ${shouldRenderColor ? '3.5rem' : '3rem'};`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n\n                  {\n                    shouldRenderColor && (\n                      <div className={buildClassName(\n                        'settings-folders-color-circle',\n                        getApiPeerColorClass({ color: folder.color }),\n                      )}\n                      />\n                    )\n                  }\n\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              {lang('SettingsFoldersEmpty')}\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n      <div className=\"settings-item pt-3\">\n        <div className=\"settings-item-relative\">\n          <Checkbox\n            label={lang('ShowFolderTags')}\n            subLabel={lang('ShowFolderTagsHint')}\n            checked={isPremium && areTagsEnabled}\n            onChange={handleToggleTags}\n            onClickLabel={(event) => {\n              if (!isPremium) {\n                event.preventDefault();\n                openPremiumModal();\n              }\n            }}\n          />\n          {!isPremium && <Icon name=\"lock-badge\" className=\"settings-folders-lock-icon\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n      areTagsEnabled,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      areTagsEnabled,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title: { text: title } } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  isActive?: boolean;\n  onSubmit: (password: string) => void;\n  onClearError?: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder,\n  hint,\n  submitLabel,\n  onSubmit,\n  onClearError,\n  onReset,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(lang('SettingsPasswordEqual'));\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword, lang]);\n\n  const handleClearError = useCallback(() => {\n    if (onClearError) {\n      onClearError();\n    }\n    setValidationError('');\n  }, [onClearError]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder || lang('CurrentPasswordPlaceholder')}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel}\n          onClearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onStart: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          {lang('SettingsPasscodeStart1', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SettingsPasscodeStart2', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          onClearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.passcode } as Complete<StateProps>),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const starsUsdWithdrawRateX1000 = global.appConfig.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreviewTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreviewTerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettingsLastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreviewApp')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n        {renderingSession?.ip && (\n          <>\n            <dt>{lang('SessionPreviewIp')}</dt>\n            <dd>{renderingSession.ip}</dd>\n          </>\n        )}\n\n        <dt>{lang('SessionPreviewLocation')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreviewIpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessionsViewAcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptSecret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreviewAcceptCalls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['activeSessions'];\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', { count: 1 }, { pluralValue: 1 }),\n      value: '7',\n    }, {\n      label: lang('Months', { count: 1 }, { pluralValue: 1 }),\n      value: '30',\n    }, {\n      label: lang('Months', { count: 3 }, { pluralValue: 3 }),\n      value: '90',\n    }, {\n      label: lang('Months', { count: 6 }, { pluralValue: 6 }),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', { count: 1 }, { pluralValue: 1 }),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessionsCurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: lang('SessionTerminate'),\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(oldLang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => global.activeSessions as Complete<StateProps>,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): Complete<StateProps> => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser || {};\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = currentUser && getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental = ({\n  isActive,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n  onReset,\n}: OwnProps & StateProps) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const accounts = useMultiaccountInfo();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true, true);\n  }, [accounts]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          href={newAccountUrl}\n          icon=\"add-user\"\n        >\n          <div className=\"title\">Login on Test Server</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n      </div>\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const areChannelsMuted = Boolean(notifyDefaults?.channels?.mutedUntil);\n  const areGroupsMuted = Boolean(notifyDefaults?.groups?.mutedUntil);\n  const areUsersMuted = Boolean(notifyDefaults?.users?.mutedUntil);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(!areUsersMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areUsersMuted}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areUsersMuted}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(!areGroupsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areGroupsMuted}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areGroupsMuted}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(!areChannelsMuted ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={!areChannelsMuted}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={areChannelsMuted}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n      notifyDefaults: global.settings.notifyDefaults,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">{lang('SettingsPerformanceGranularTitle')}</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: appConfig.canDisplayAutoarchiveSetting || isCurrentUserPremium,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      } as Complete<StateProps>;\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): Complete<StateProps> => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: ApiReaction;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction?.type === 'emoji' ? selectedReaction.emoticon : undefined}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji?: ApiSticker;\n  codeLength?: number;\n  recoveryEmail?: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          onClearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => ({ ...global.twoFaSettings } as Complete<StateProps>),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch.ts';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"BDZrSTO_\",\"root\":\"QOz6fQFU\",\"avatar\":\"dXSy0i2c\",\"avatarHidden\":\"n0vJEdNW\",\"ghost\":\"E1IeDpeb\",\"ghostAnimateName\":\"HMp3KTKQ\",\"ghostRevealName\":\"unYkDic1\",\"ghostLast\":\"dZJGfaXC\"};","import { ANIMATION_END_DELAY } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport ribbonStyles from '../StoryRibbon.module.scss';\nimport togglerStyles from '../StoryToggler.module.scss';\n\nexport const ANIMATION_DURATION = 250;\nconst RIBBON_OFFSET = 0.25 * REM;\nconst RIBBON_Z_INDEX = 11;\nconst STROKE_OFFSET = 0.1875 * REM;\nconst CANVAS_OFFSET = 0.125 * REM;\n\nconst callbacks = new Set<NoneToVoidFunction>();\n\nexport function animateOpening(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container, toggler, leftMainHeader, ribbonPeers, toggleAvatars,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n\n  const { bottom: headerBottom, right: headerRight } = leftMainHeader.getBoundingClientRect();\n  const toTop = headerBottom + RIBBON_OFFSET;\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    let {\n\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = toggleAvatar.getBoundingClientRect();\n\n    const {\n      left: toLeft,\n      width: toWidth,\n    } = peer.getBoundingClientRect();\n\n    if (toLeft > headerRight) {\n      return;\n    }\n\n    fromLeft -= STROKE_OFFSET;\n    fromWidth += 2 * STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft;\n    const fromTranslateY = fromTop - toTop;\n    const fromScale = fromWidth / toWidth;\n\n    fromTop -= STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft + 2 * STROKE_OFFSET;\n    const toTranslateY = toTop - fromTop + STROKE_OFFSET;\n    const toScale = toWidth / (fromWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      if (!toggleAvatar) return;\n      const ghost = createGhost(peer);\n\n      let ghost2: HTMLElement | undefined;\n\n      // If this is a toogle avatar we create a second ghost and do crossfade animation\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        // Else we animate only name\n        ghost.classList.add(togglerStyles.ghostAnimateName);\n      }\n\n      applyStyles(ghost, {\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        zIndex: String(zIndex),\n        opacity: ghost2 ? '0' : '',\n        transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${fromTop}px`,\n          left: `${fromLeft}px`,\n          zIndex: String(zIndex),\n        });\n      }\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n      toggleAvatar.classList.add('animating');\n      peer.classList.add('animating');\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: '',\n          transform: '',\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '0',\n            transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n          });\n        } else {\n          ghost.classList.add(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            toggleAvatar?.classList.remove('animating');\n            peer.classList.remove('animating');\n\n            callbacks.delete(cb);\n          });\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nexport function animateClosing(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container,\n    toggler,\n    toggleAvatars,\n    ribbonPeers,\n    leftMainHeader,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n  const { right: headerRight } = leftMainHeader.getBoundingClientRect();\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    const {\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = peer.getBoundingClientRect();\n\n    let {\n      left: toLeft,\n      width: toWidth,\n      top: toTop,\n    } = toggleAvatar.getBoundingClientRect();\n\n    if (fromLeft > headerRight) {\n      return;\n    }\n\n    toLeft -= STROKE_OFFSET;\n    toWidth += 2 * STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft;\n    const toTranslateY = toTop - fromTop - CANVAS_OFFSET;\n    const toScale = toWidth / fromWidth;\n\n    toTop -= STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft + 2 * STROKE_OFFSET;\n    const fromTranslateY = fromTop - toTop + STROKE_OFFSET;\n    const fromScale = fromWidth / (toWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      const ghost = createGhost(peer);\n      let ghost2: HTMLElement | undefined;\n\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        ghost.classList.add(togglerStyles.ghostAnimateName, togglerStyles.ghostRevealName);\n      }\n\n      applyStyles(ghost, {\n        top: `${fromTop}px`,\n        left: `${fromLeft}px`,\n        width: `${fromWidth}px`,\n        zIndex: String(zIndex),\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${toTop}px`,\n          left: `${toLeft}px`,\n          zIndex: String(zIndex),\n          opacity: '0',\n          transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n        });\n      }\n\n      peer.classList.add('animating');\n      toggleAvatar.classList.add('animating');\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: ghost2 ? '0' : '',\n          transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '',\n            transform: '',\n          });\n        } else {\n          ghost.classList.remove(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            peer.classList.remove('animating');\n            toggleAvatar.classList.remove('animating');\n          });\n\n          callbacks.delete(cb);\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nfunction getHTMLElements(isArchived?: boolean) {\n  let container = document.getElementById('LeftColumn');\n  if (container && isArchived) {\n    container = container.querySelector<HTMLElement>('.ArchivedChats');\n  }\n  if (!container) return {};\n  const toggler = container.querySelector<HTMLElement>('#StoryToggler');\n  const ribbon = container.querySelector<HTMLElement>('#StoryRibbon');\n  const leftMainHeader = container.querySelector<HTMLElement>('.left-header');\n  const ribbonPeers = ribbon?.querySelectorAll<HTMLElement>(`.${ribbonStyles.peer}`);\n  const toggleAvatars = toggler?.querySelectorAll<HTMLElement>('.Avatar');\n\n  return {\n    container,\n    toggler,\n    leftMainHeader,\n    ribbonPeers,\n    toggleAvatars,\n  };\n}\n\nfunction createGhost(sourceEl: HTMLElement) {\n  const ghost = sourceEl.cloneNode(true) as HTMLElement;\n  ghost.classList.add(togglerStyles.ghost);\n\n  // Avoid source animating class being copied to the ghost\n  ghost.classList.remove('animating');\n\n  ghost.draggable = false;\n  ghost.oncontextmenu = stopEvent;\n\n  const sourceCanvas = sourceEl.querySelector('canvas');\n  if (sourceCanvas) {\n    const canvas = ghost.querySelector('canvas');\n    canvas?.getContext('2d')?.drawImage(sourceCanvas, 0, 0);\n  }\n\n  return ghost;\n}\n\nfunction getPeerId(el: HTMLElement) {\n  return el?.getAttribute('data-peer-id');\n}\n\nfunction selectByPeerId(el: HTMLElement, id: string) {\n  return el?.querySelector<HTMLElement>(`[data-peer-id=\"${id}\"]`);\n}\n\nfunction createDelayedCallback(callback: NoneToVoidFunction, ms: number) {\n  const timeout = setTimeout(callback, ms);\n\n  return () => {\n    clearTimeout(timeout);\n    callback();\n  };\n}\n\nfunction cancelDelayedCallbacks() {\n  callbacks.forEach((cb) => cb());\n  callbacks.clear();\n}\n","import type React from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  peer: ApiPeer;\n  isArchived?: boolean;\n}\n\nfunction StoryRibbonButton({ peer, isArchived }: OwnProps) {\n  const {\n    openChat,\n    openChatWithInfo,\n    openStoryViewer,\n    toggleStoriesHidden,\n  } = getActions();\n\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const isSelf = 'isSelf' in peer && peer.isSelf;\n  const isChannel = !isUserId(peer.id);\n\n  useStoryPreloader(peer.id);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.story-peer-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen) return;\n\n    openStoryViewer({ peerId: peer.id, origin: StoryViewerOrigin.StoryRibbon });\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleSavedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleArchivedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'storiesArchive' });\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleArchivePeer = useLastCallback(() => {\n    toggleStoriesHidden({ peerId: peer.id, isHidden: !isArchived });\n  });\n\n  return (\n    <div\n      ref={ref}\n      role=\"button\"\n      data-peer-id={peer.id}\n      tabIndex={0}\n      className={styles.peer}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      <Avatar\n        peer={peer}\n        withStory\n        storyViewerOrigin={StoryViewerOrigin.StoryRibbon}\n        storyViewerMode=\"full\"\n      />\n      <div className={buildClassName(styles.name, peer.hasUnreadStories && styles.name_hasUnreadStory)}>\n        {isSelf ? lang('MyStory') : getPeerTitle(lang, peer)}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName('story-peer-context-menu', styles.contextMenu)}\n          autoClose\n          withPortal\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {isSelf ? (\n            <>\n              <MenuItem onClick={handleSavedStories} icon=\"play-story\">\n                {lang('StoryList.Context.SavedStories')}\n              </MenuItem>\n              <MenuItem onClick={handleArchivedStories} icon=\"archive\">\n                {lang('StoryList.Context.ArchivedStories')}\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              {!isChannel && (\n                <MenuItem onClick={handleOpenChat} icon=\"message\">\n                  {lang('SendMessageTitle')}\n                </MenuItem>\n              )}\n              {isChannel ? (\n                <MenuItem onClick={handleOpenProfile} icon=\"channel\">\n                  {lang('ChatList.ContextOpenChannel')}\n                </MenuItem>\n              ) : (\n                <MenuItem onClick={handleOpenProfile} icon=\"user\">\n                  {lang('StoryList.Context.ViewProfile')}\n                </MenuItem>\n              )}\n              <MenuItem\n                onClick={handleArchivePeer}\n                icon={isArchived ? 'unarchive' : 'archive'}\n              >\n                {lang(isArchived ? 'StoryList.Context.Unarchive' : 'StoryList.Context.Archive')}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryRibbonButton);\n","import { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StoryRibbonButton from './StoryRibbonButton';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  className?: string;\n  isClosing?: boolean;\n}\n\ninterface StateProps {\n  orderedPeerIds: string[];\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n}\n\nfunction StoryRibbon({\n  isArchived,\n  className,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  isClosing,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const fullClassName = buildClassName(\n    styles.root,\n    !orderedPeerIds.length && styles.hidden,\n    isClosing && styles.closing,\n    className,\n    'no-scrollbar',\n  );\n\n  const ref = useRef<HTMLDivElement>();\n\n  useHorizontalScroll(ref, getIsMobile());\n\n  return (\n    <div\n      ref={ref}\n      id=\"StoryRibbon\"\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {orderedPeerIds.map((peerId) => {\n        const peer = usersById[peerId] || chatsById[peerId];\n\n        if (!peer) {\n          return undefined;\n        }\n\n        return (\n          <StoryRibbonButton\n            key={peerId}\n            peer={peer}\n            isArchived={isArchived}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isArchived }): Complete<StateProps> => {\n    const { orderedPeerIds: { active, archived } } = global.stories;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n\n    return {\n      orderedPeerIds: isArchived ? archived : active,\n      usersById,\n      chatsById,\n    };\n  },\n)(StoryRibbon));\n","import {\n  beginHeavyAnimation, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ANIMATION_END_DELAY, PREVIEW_AVATAR_COUNT } from '../../config';\nimport { selectIsForumPanelOpen, selectPerformanceSettingsValue, selectTabState } from '../../global/selectors';\nimport { animateClosing, animateOpening, ANIMATION_DURATION } from './helpers/ribbonAnimation';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryToggler.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  canShow?: boolean;\n}\n\ninterface StateProps {\n  currentUserId: string;\n  orderedPeerIds: string[];\n  isShown: boolean;\n  isForumPanelOpen?: boolean;\n  withAnimation?: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  peerStories: GlobalState['stories']['byPeerId'];\n}\n\nconst PRELOAD_PEERS = 5;\n\nfunction StoryToggler({\n  currentUserId,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  canShow,\n  isShown,\n  isForumPanelOpen,\n  isArchived,\n  withAnimation,\n  peerStories,\n}: OwnProps & StateProps) {\n  const { toggleStoryRibbon } = getActions();\n\n  const lang = useOldLang();\n\n  const peers = useMemo(() => {\n    if (orderedPeerIds.length === 1) {\n      return [usersById[orderedPeerIds[0]] || chatsById[orderedPeerIds[0]]];\n    }\n\n    return orderedPeerIds\n      .map((id) => usersById[id] || chatsById[id])\n      .filter((peer) => peer && peer.id !== currentUserId)\n      .slice(0, PREVIEW_AVATAR_COUNT)\n      .reverse();\n  }, [currentUserId, orderedPeerIds, usersById, chatsById]);\n\n  const closeFriends = useMemo(() => {\n    if (!peers?.length) return {};\n    return peers.reduce((acc, peer) => {\n      const stories = peerStories[peer.id];\n      if (!stories) return acc;\n\n      const isCloseFriend = stories.orderedIds.some((id) => {\n        const story = stories.byId[id];\n        if (!story || !('isForCloseFriends' in story)) return false;\n        const isRead = stories.lastReadId && story.id <= stories.lastReadId;\n        return story.isForCloseFriends && !isRead;\n      });\n\n      acc[peer.id] = isCloseFriend;\n      return acc;\n    }, {} as Record<string, boolean>);\n  }, [peerStories, peers]);\n\n  const preloadPeerIds = useMemo(() => {\n    return orderedPeerIds.slice(0, PRELOAD_PEERS);\n  }, [orderedPeerIds]);\n\n  useStoryPreloader(preloadPeerIds);\n\n  const isVisible = canShow && isShown;\n  // For some reason, setting 'slow' here also fixes scroll freezes on iOS when collapsing Story Ribbon\n  const { ref, shouldRender } = useShowTransition<HTMLButtonElement>({\n    isOpen: isVisible,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  useEffect(() => {\n    if (!withAnimation || isForumPanelOpen) return;\n    if (isVisible) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(isArchived);\n    } else {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(isArchived);\n    }\n  }, [isArchived, isVisible, withAnimation, isForumPanelOpen]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      id=\"StoryToggler\"\n      className={styles.root}\n      aria-label={lang('Chat.Context.Peer.OpenStory')}\n      onClick={() => toggleStoryRibbon({ isShown: true, isArchived })}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {peers.map((peer) => (\n        <Avatar\n          key={peer.id}\n          peer={peer}\n          size=\"tiny\"\n          className={styles.avatar}\n          withStorySolid\n          forceFriendStorySolid={closeFriends[peer.id]}\n        />\n      ))}\n    </button>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { isArchived }): Complete<StateProps> => {\n  const { orderedPeerIds: { archived, active }, byPeerId } = global.stories;\n  const { storyViewer: { isRibbonShown, isArchivedRibbonShown } } = selectTabState(global);\n  const isForumPanelOpen = selectIsForumPanelOpen(global);\n  const withAnimation = selectPerformanceSettingsValue(global, 'storyRibbonAnimations');\n\n  return {\n    currentUserId: global.currentUserId!,\n    orderedPeerIds: isArchived ? archived : active,\n    isShown: isArchived ? !isArchivedRibbonShown : !isRibbonShown,\n    isForumPanelOpen,\n    withAnimation,\n    usersById: global.users.byId,\n    chatsById: global.chats.byId,\n    peerStories: byPeerId,\n  };\n})(StoryToggler));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MUTE_INDEFINITE_TIMESTAMP } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MUTE_INDEFINITE_TIMESTAMP;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { UNMUTE_TIMESTAMP } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, mutedUntil: UNMUTE_TIMESTAMP });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {} as Complete<StateProps>;\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\",\"webPageInfo\":\"oJc5we4P\",\"webPageSite\":\"s3_9Vro3\",\"webPageTitle\":\"yHiXuUNs\",\"mediaPreview\":\"i0nNHWse\",\"clickable\":\"zZTQ0N6S\",\"mediaImage\":\"q7pECane\",\"round\":\"POIISsPN\",\"spoiler\":\"hTsgqcW9\",\"playIcon\":\"nQXtQwpa\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer, ApiWebPage } from '../../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\ntype StateProps = {\n  webPage?: ApiWebPage;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n  webPage,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n  const hasVideo = Boolean(getMessageVideo(message));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const hasMediaPreview = Boolean(mediaBlobUrl || mediaThumbnail);\n\n  const webPageInfo = webPage?.webpageType === 'full' ? {\n    siteName: webPage.siteName || webPage.displayUrl,\n    title: webPage.title,\n    url: webPage.url,\n    isSafe: message.content.webPage?.isSafe,\n  } : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  const handleWebPageClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!webPageInfo?.url) return;\n\n    const { openUrl } = getActions();\n    openUrl({ url: webPageInfo.url, shouldSkipModal: webPageInfo.isSafe });\n  });\n\n  const handleMediaClick = useLastCallback((e: React.MouseEvent) => {\n    if (webPageInfo?.url) {\n      e.stopPropagation();\n      const { openUrl } = getActions();\n      openUrl({ url: webPageInfo.url, shouldSkipModal: webPageInfo.isSafe });\n    }\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n        {webPageInfo && (\n          <div\n            className={styles.webPageInfo}\n            onClick={handleWebPageClick}\n            role=\"button\"\n            tabIndex={0}\n            title={webPageInfo.url}\n          >\n            <div className={styles.webPageSite}>{renderText(webPageInfo.siteName)}</div>\n            {webPageInfo.title && (\n              <div className={styles.webPageTitle}>{renderText(webPageInfo.title)}</div>\n            )}\n          </div>\n        )}\n      </div>\n      {hasMediaPreview && (\n        <div\n          className={buildClassName(\n            styles.mediaPreview,\n            webPageInfo && styles.clickable,\n          )}\n          onClick={handleMediaClick}\n          role={webPageInfo ? 'button' : undefined}\n          tabIndex={webPageInfo ? 0 : undefined}\n          title={webPageInfo?.url}\n        >\n          <img\n            src={mediaBlobUrl || mediaThumbnail}\n            alt=\"\"\n            className={buildClassName(\n              styles.mediaImage,\n              isRoundVideo && styles.round,\n              isSpoiler && styles.spoiler,\n            )}\n            draggable={false}\n          />\n          {hasVideo && <i className={buildClassName(styles.playIcon, 'icon icon-play')} />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): Complete<StateProps> => {\n    return {\n      webPage: selectWebPageFromMessage(global, message),\n    };\n  },\n)(MiddleSearchResult));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"domainButtons\":\"KamajtjH\",\"domainButtonWrapper\":\"bNdv38ki\",\"domainButton\":\"wTJ6uBy1\",\"removeDomainButton\":\"YLtqVQ3h\",\"addDomainButton\":\"VPrUqLUm\",\"newDomainInput\":\"cDiKK557\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useLocalStorage } from '../../../hooks/useStorage';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport reactionStyles from '../message/reactions/ReactionButton.module.scss';\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [customTerms, setCustomTerms] = useLocalStorage<string[]>({\n    key: 'search_custom_terms',\n    initValue: [],\n  });\n  const [isAddingDomain, setIsAddingDomain] = useState(false);\n  const [newDomainValue, setNewDomainValue] = useState('');\n  const newDomainInputRef = useRef<HTMLInputElement>();\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean(((query || savedTag) && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean((query || savedTag) && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n\n      if (!savedTag) {\n        resetMiddleSearch();\n        shouldCancelSearchRef.current = true;\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (query || savedTag) {\n      handleSearch();\n    }\n  }, [query, savedTag]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (isAddingDomain && newDomainInputRef.current) {\n      newDomainInputRef.current.focus();\n    }\n  }, [isAddingDomain]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    shouldCancelSearchRef.current = false;\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  const presavedDomains = useMemo(() => [\n    'youtube.com',\n    'youtu.be',\n  ], []);\n\n  const allDomains = useMemo(() => [\n    ...presavedDomains,\n    ...customTerms,\n  ], [presavedDomains, customTerms]);\n\n  const handleDomainClick = useLastCallback((domain: string) => {\n    if (query === domain) {\n      handleQueryChange('');\n    } else {\n      handleQueryChange(domain);\n    }\n    focusInput();\n  });\n\n  const handleAddDomainClick = useLastCallback(() => {\n    setIsAddingDomain(true);\n  });\n\n  const handleSaveDomain = useLastCallback(() => {\n    const trimmedValue = newDomainValue.trim();\n    if (trimmedValue && !allDomains.includes(trimmedValue)) {\n      setCustomTerms([...customTerms, trimmedValue]);\n    }\n    setNewDomainValue('');\n    setIsAddingDomain(false);\n  });\n\n  const handleCancelAddDomain = useLastCallback(() => {\n    setNewDomainValue('');\n    setIsAddingDomain(false);\n  });\n\n  const handleRemoveDomain = useLastCallback((domain: string) => {\n    setCustomTerms(customTerms.filter((d: string) => d !== domain));\n    if (query === domain) {\n      setQuery('');\n    }\n  });\n\n  const handleNewDomainKeyDown = useLastCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSaveDomain();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      handleCancelAddDomain();\n    }\n  });\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        \n        {!isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.domainButtons,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {allDomains.map((domain) => {\n              const isChosen = query === domain;\n              const isCustom = customTerms.includes(domain);\n              return (\n                <div key={domain} className={styles.domainButtonWrapper}>\n                  <Button\n                    className={buildClassName(\n                      reactionStyles.root,\n                      styles.domainButton,\n                      isChosen && reactionStyles.chosen,\n                    )}\n                    size=\"tiny\"\n                    onClick={() => handleDomainClick(domain)}\n                  >\n                    {domain}\n                  </Button>\n                  {isCustom && (\n                    <button\n                      className={styles.removeDomainButton}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleRemoveDomain(domain);\n                      }}\n                      aria-label=\"Remove\"\n                    >\n                      <Icon name=\"close\" />\n                    </button>\n                  )}\n                </div>\n              );\n            })}\n            {isAddingDomain ? (\n              <input\n                ref={newDomainInputRef}\n                type=\"text\"\n                className={styles.newDomainInput}\n                value={newDomainValue}\n                placeholder=\"Enter search term...\"\n                onChange={(e) => setNewDomainValue(e.target.value)}\n                onKeyDown={handleNewDomainKeyDown}\n                onBlur={() => {\n                  setTimeout(handleCancelAddDomain, 100);\n                }}\n              />\n            ) : (\n              <Button\n                className={buildClassName(reactionStyles.root, styles.addDomainButton)}\n                size=\"tiny\"\n                onClick={handleAddDomainClick}\n              >\n                <Icon name=\"add\" />\n              </Button>\n            )}\n          </div>\n        )}\n        \n        <div className={styles.separator} />\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {query ? oldLang('NoResultFoundFor', query) : oldLang('NoResult')}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  reactionsLimit?: number;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig;\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig;\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const anyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, anyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount: number;\n  maxTitleLength: number;\n  maxItemLength: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount,\n  maxTitleLength,\n  maxItemLength,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const modalTitle = isAddTaskMode ? 'TitleAppendToDoList'\n      : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(modalTitle)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  const moreTasksCount = maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount2', {\n          count: moreTasksCount,\n        }, {\n          pluralValue: moreTasksCount,\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig.todoItemsMax,\n      maxTitleLength: appConfig.todoTitleLengthMax,\n      maxItemLength: appConfig.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=\"${formattedLinkUrl}\" class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      if (!linkUrl.trim()) return;\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingSpoilerAria')}\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingBoldAria')}\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingItalicAria')}\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingUnderlineAria')}\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingStrikethroughAria')}\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel={lang('FormattingMonospaceAria')}\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('FormattingAddLinkAria')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder={lang('FormattingEnterUrl')}\n              autoComplete=\"off\"\n              spellCheck={IS_TAURI ? false : undefined}\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm || switchWebview)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): Complete<StateProps> => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      chatFullInfo,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { type LangFn } from '../../../util/localization';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang(\n            'ChannelStatsViewsCount',\n            { count: postStatistic.viewsCount },\n            { pluralValue: postStatistic.viewsCount },\n          )}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isGraphReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isGraphReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): Complete<StateProps> => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  currentBio,\n  isActive,\n  maxBioLength,\n  onClose,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): Complete<StateProps> => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                className=\"align-checkbox-with-list-buttons\"\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions } = global.appConfig;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { MUTE_INDEFINITE_TIMESTAMP, SERVICE_NOTIFICATIONS_USER_ID, UNMUTE_TIMESTAMP } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n    updateChatMutedState,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, markProfileFieldsTouched, unmarkProfileFieldsTouched] = useFlag();\n  const [error, setError] = useState<string | undefined>();\n  const [isNotificationsTouched, markNotificationsTouched, unmarkNotificationsTouched] = useFlag();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    unmarkProfileFieldsTouched();\n    unmarkNotificationsTouched();\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileFieldsTouched();\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    markProfileFieldsTouched();\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    markNotificationsTouched();\n    markProfileFieldsTouched();\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n\n    if (isNotificationsTouched) {\n      updateChatMutedState({\n        chatId: userId, mutedUntil: isNotificationsEnabled ? UNMUTE_TIMESTAMP : MUTE_INDEFINITE_TIMESTAMP,\n      });\n    }\n  }, [firstName, isNotificationsEnabled, isNotificationsTouched, lastName, userId]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    markProfileFieldsTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        onClearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): Complete<StateProps> => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (form?.savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: form.savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, form?.savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={form!.savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={form!.savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          {lang('PaymentsProvidesNotSupported', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const freezeUntilDate = global.appConfig.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"ChJT6ggP\",\"description\":\"ravQhVQQ\",\"descriptionPreview\":\"_K5HhOM0\",\"previewLink\":\"yY4hj8r_\",\"backLink\":\"dcNVNCXo\",\"title\":\"IvsV0tkW\",\"ratingProgress\":\"XYpzs7CQ\",\"withPreview\":\"UgviXkNW\",\"subtitle\":\"OvdHupR0\",\"footer\":\"XtZPIDLP\",\"badge\":\"JdeFDQBI\",\"understoodIcon\":\"Lwz8rpdL\",\"badgeAdded\":\"Lr6JUU14\",\"badgeDeducted\":\"OxZxdqcn\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsRating, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress, { type AnimationDirection } from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './ProfileRatingModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['profileRatingModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  currentUserId?: string;\n  starsRating?: ApiStarsRating;\n  pendingRating?: ApiStarsRating;\n  pendingRatingDate?: number;\n};\n\nconst ProfileRatingModal = ({\n  modal,\n  user,\n  currentUserId,\n  starsRating,\n  pendingRating,\n  pendingRatingDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeProfileRatingModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const [showFutureRating, setShowFutureRating] = useState(false);\n\n  const handleClose = useLastCallback(() => {\n    closeProfileRatingModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShowFutureRating(false);\n    }\n  }, [isOpen]);\n\n  const handleShowFuture = useLastCallback(() => {\n    setShowFutureRating(true);\n  });\n\n  const handleShowCurrent = useLastCallback(() => {\n    setShowFutureRating(false);\n  });\n\n  const renderBadge = (type: 'added' | 'deducted') => {\n    const isAdded = type === 'added';\n    const badgeText = isAdded ? lang('RatingBadgeAdded') : lang('RatingBadgeDeducted');\n    const badgeClass = isAdded ? styles.badgeAdded : styles.badgeDeducted;\n\n    return (\n      <span className={buildClassName(styles.badge, badgeClass)}>\n        {badgeText}\n      </span>\n    );\n  };\n\n  const header = useMemo(() => {\n    if (!modal || !user || !starsRating || !isOpen) return undefined;\n\n    const rating = showFutureRating && pendingRating ? pendingRating : starsRating;\n    const currentStars = rating.stars;\n    const currentLevelStars = rating.currentLevelStars;\n    const nextLevelStars = rating.nextLevelStars;\n    const currentLevel = rating.level;\n    const nextLevel = currentLevel + 1;\n    const isNegative = currentLevel < 0;\n    const pendingLevel = !showFutureRating && pendingRating ? pendingRating.level : starsRating.level;\n\n    let levelProgress = 0;\n\n    if (!nextLevelStars) {\n      levelProgress = 1;\n    } else if (nextLevelStars > currentLevelStars) {\n      levelProgress = Math.max(0.03, (currentStars - currentLevelStars) / (nextLevelStars - currentLevelStars));\n    } else {\n      levelProgress = 1;\n    }\n\n    const progress = isNegative ? 0.5 : Math.max(0, Math.min(1, levelProgress));\n\n    const waitTime = pendingRatingDate ? pendingRatingDate - Math.floor(Date.now() / 1000) : 0;\n    const pendingPoints = pendingRating ? pendingRating.stars - starsRating.stars : 0;\n    const shouldShowPreview = pendingRating && pendingRatingDate;\n\n    const renderPreviewDescription = () => {\n      if (!shouldShowPreview) return undefined;\n\n      return (\n        <Transition\n          name=\"fade\"\n          className={styles.descriptionPreview}\n          activeKey={showFutureRating ? 1 : 0}\n          shouldCleanup\n          shouldRestoreHeight\n        >\n          {showFutureRating ? (\n            <p>\n              {lang('DescriptionFutureRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.backLink} onClick={handleShowCurrent}>\n                    {lang('LinkDescriptionRatingBack')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          ) : (\n            <p>\n              {lang('DescriptionPendingRating', {\n                time: formatShortDuration(lang, waitTime),\n                points: Math.abs(pendingPoints),\n                link: (\n                  <span className={styles.previewLink} onClick={handleShowFuture}>\n                    {lang('LinkDescriptionRatingPreview')}\n                  </span>\n                ),\n              }, {\n                pluralValue: Math.abs(pendingPoints),\n                withNodes: true,\n              })}\n            </p>\n          )}\n        </Transition>\n      );\n    };\n\n    let animationDirection: AnimationDirection = 'none';\n    if (currentLevel >= 0 && pendingLevel >= 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel > pendingLevel ? 'forward' : 'backward';\n    }\n\n    if (currentLevel < 0 && pendingLevel < 0 && currentLevel !== pendingLevel) {\n      animationDirection = currentLevel < pendingLevel ? 'backward' : 'forward';\n    }\n\n    const userFallbackText = lang('ActionFallbackUser');\n\n    return (\n      <div className={styles.header}>\n        <div className={styles.title}>\n          {lang('TitleRating')}\n        </div>\n        <PremiumProgress\n          leftText={isNegative ? undefined : lang('RatingLevel', { level: currentLevel })}\n          rightText={isNegative ? lang('RatingNegativeLevel') : lang('RatingLevel', { level: nextLevel })}\n          floatingBadgeIcon={isNegative ? 'warning' : 'crown-wear'}\n          floatingBadgeText={isNegative ? currentLevel.toString()\n            : `${lang.number(currentStars)} / ${lang.number(nextLevelStars || currentStars)}`}\n          progress={progress}\n          isPrimary={currentLevel >= 0}\n          isNegative={currentLevel < 0}\n          animationDirection={animationDirection}\n          className={buildClassName(styles.ratingProgress, shouldShowPreview && styles.withPreview)}\n        />\n        {renderPreviewDescription()}\n        <p className={styles.description}>\n          {user?.id === currentUserId\n            ? lang('RatingYourReflectsActivity')\n            : lang('RatingReflectsActivity', { name: getPeerTitle(lang, user) || userFallbackText })}\n        </p>\n      </div>\n    );\n  }, [modal, user, currentUserId, starsRating,\n    pendingRating, pendingRatingDate, showFutureRating,\n    lang, handleShowFuture, handleShowCurrent, isOpen]);\n\n  const listItemData = [\n    ['gift', lang('RatingGiftsFromTelegram'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsFromTelegramDesc')}\n      </span>\n    )],\n    ['user-stars', lang('RatingGiftsAndPostsFromUsers'), (\n      <span className={styles.subtitle}>\n        {renderBadge('added')}\n        {lang('RatingGiftsAndPostsFromUsersDesc')}\n      </span>\n    )],\n    ['refund', lang('RatingRefundsAndConversions'), (\n      <span className={styles.subtitle}>\n        {renderBadge('deducted')}\n        {lang('RatingRefundsAndConversionsDesc')}\n      </span>\n    )],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleClose}\n        >\n          <Icon name=\"understood\" className={styles.understoodIcon} />\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen, handleClose]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId;\n    const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n    const userFullInfo = modal?.userId\n      ? selectUserFullInfo(global, modal.userId) : undefined;\n\n    const starsRating = userFullInfo?.starsRating;\n    const pendingRating = userFullInfo?.starsMyPendingRating;\n    const pendingRatingDate = userFullInfo?.starsMyPendingRatingDate;\n\n    return {\n      user,\n      currentUserId,\n      starsRating,\n      pendingRating,\n      pendingRatingDate,\n    };\n  },\n)(ProfileRatingModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n"],"names":["getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","params","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","id","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","memo","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","_jsxs","Modal","onEnter","className","children","_jsx","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","useCallback","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","collectedMessageIds","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","IS_TAURI","IS_MAC_OS","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","PRIMARY_VIDEO_MIME","bufferCache","sizeCache","pendingRequests","makeProgressiveLoader","chunkSize","match","cacheKey","finally","delete","fullSize","checkIfStreamingSupported","mimeType","IS_SAFARI","getMediaSource","isTypeSupported","appendBuffer","sourceBuffer","buffer","error","warn","endOfStream","mediaSource","ManagedMediaSource","MediaSource","preloadedStories","canPreload","aroundStoryId","Array","isArray","getGlobal","byPeerId","orderedIds","mediaHashes","hash","format","isStream","loader","getProgressiveUrl","cachedSize","chunk","byteLength","preloadStream","mediaLoader","then","head","preload","autoplay","disableRemotePlayback","display","load","unloadVideo","preloadProgressive","preloadImage","preloadHashes","peerStories","selectPeerStories","preloadIds","currentId","slice","findIdsAroundCurrentId","currentStoryId","has","altVideos","Set","getPreloadMediaHashes","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","MediaSourceClass","onSourceOpen","addSourceBuffer","next","done","once","URL","createObjectURL","revokeObjectURL","useStreaming","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","isSinglePeer","isPrivate","isArchive","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","storyExpireDate","viewersExpireDate","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","root","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","headerRef","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","selectCustomEmoji","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","isBig","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","LOCAL_TGS_URLS","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","onClearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","minStarsAmount","starsSuggestedPostAmountMin","ageMinSeconds","starsSuggestedPostAgeMin","futureMin","starsSuggestedPostFutureMin","futureMax","starsSuggestedPostFutureMax","tonMaxAmount","tonSuggestedPostAmountMax","tonMinAmount","tonSuggestedPostAmountMin","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","tonCommissionPermille","tonSuggestedPostCommissionPermille","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutFiles","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasIpRevealingMedia","selectHasIpRevealingMedia","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isFileIpDialogOpen","openFileIpDialog","closeFileIpDialog","shouldNotWarnAboutFiles","setShouldNotWarnAboutFiles","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleFileIpConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","updateChatMutedState","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","handleUnmute","mutedUntil","UNMUTE_TIMESTAMP","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","FOLDER_COLORS","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","FOLDER_TITLE_MAX_LENGTH","getApiPeerColorClass","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","areTagsEnabled","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","toggleDialogFilterTags","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleToggleTags","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","shouldRenderColor","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","PasswordMonkey","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","accounts","useMultiaccountInfo","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","newAccountUrl","freeIndex","getAccountSlotUrl","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","GeneralChatBackground","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","notifyDefaults","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","areChannelsMuted","areGroupsMuted","groups","areUsersMuted","handleSettingsChange","peerType","setting","currentIsMuted","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","clearError","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","RIBBON_OFFSET","RIBBON_Z_INDEX","STROKE_OFFSET","CANVAS_OFFSET","callbacks","getHTMLElements","toggler","ribbon","leftMainHeader","ribbonPeers","ribbonStyles","toggleAvatars","sourceEl","sourceCanvas","getPeerId","getAttribute","selectByPeerId","createDelayedCallback","ms","timeout","cancelDelayedCallbacks","toggleStoriesHidden","isDense","handleSavedStories","profileTab","handleArchivedStories","handleOpenProfile","handleArchivePeer","StoryRibbonButton","isRibbonShown","isArchivedRibbonShown","isForumPanelOpen","selectIsForumPanelOpen","canShow","toggleStoryRibbon","PREVIEW_AVATAR_COUNT","isRead","preloadPeerIds","useShowTransition","withShouldRender","headerRight","lastToggleAvatar","firstToggleAvatar","lastId","toggleAvatar","zIndex","toScale","fromScale","togglerStyles","headerBottom","withStorySolid","forceFriendStorySolid","ArchivedChats","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","MUTE_INDEFINITE_TIMESTAMP","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","hasVideo","hasMediaPreview","webPageInfo","siteName","displayUrl","isSafe","handleWebPageClick","shouldSkipModal","handleMediaClick","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","webPageSite","webPageTitle","mediaPreview","clickable","mediaImage","spoiler","playIcon","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","customTerms","setCustomTerms","useLocalStorage","initValue","isAddingDomain","setIsAddingDomain","newDomainValue","setNewDomainValue","newDomainInputRef","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","presavedDomains","allDomains","handleDomainClick","handleAddDomainClick","handleSaveDomain","trimmedValue","handleCancelAddDomain","handleRemoveDomain","handleNewDomainKeyDown","renderDropdown","dropdown","dropdownHidden","separator","domainButtons","wrap","isChosen","domainButtonWrapper","reactionStyles","domainButton","chosen","removeDomainButton","newDomainInput","addDomainButton","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","moreTasksCount","tasksToRender","stateIndex","renderItems","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","spellCheck","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","isGraphReady","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","markProfileFieldsTouched","unmarkProfileFieldsTouched","isNotificationsTouched","markNotificationsTouched","unmarkNotificationsTouched","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop","starsRating","pendingRating","starsMyPendingRating","pendingRatingDate","starsMyPendingRatingDate","ProfileRatingModal","closeProfileRatingModal","showFutureRating","setShowFutureRating","handleShowFuture","handleShowCurrent","renderBadge","badgeClass","rating","currentStars","currentLevelStars","nextLevelStars","nextLevel","isNegative","pendingLevel","waitTime","pendingPoints","shouldShowPreview","animationDirection","userFallbackText","renderPreviewDescription","shouldRestoreHeight","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","MonkeyClose","playSegment","MonkeyPeek"],"sourceRoot":""}